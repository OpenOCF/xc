# source this file from IOTIVITY_HOME to setup the iotivity build environment

# Tested on OS X; should work on Linux but not yet tested

# CAVEAT: source this after sourcing a devhost; that sets e.g. IOTIVITY_HOME
export TARGET_PLATFORM=edison
export TARGET_PLATFORM_VERSION=1.7.3   # 3.5?

# uname -s
export TARGET_KERNEL=linux

export TARGET_OS=poky-edison
export TARGET_OS_VERSION=3.10.98-poky-edison+ # $ uname -a

# used by GNU make's implicit rules
export TARGET_BITS=32
# $ arch, $ uname -m
export TARGET_MACHINE=i686
# the intel toolchain says core2, but edison actually has an atom? "$ arch" says i686
# uname -p => unkown, take it from the cross-compile sdk:
export TARGET_PROCESSOR=core2
# $ uname -i => unknown, use ARCH from cross-compile sdk
export TARGET_HWPLATFORM=x86

#export TARGET_ABI=??

# TARGET_ARCH follows GNU make convention - it's where you set flags
#unset TARGET_ARCH
export TARGET_ARCH="-m${TARGET_BITS} -march=${TARGET_PROCESSOR} -mtune=${TARGET_PROCESSOR} -msse3 -mfpmath=sse -mstackrealign"

#EDIT: STAGE= debug | dev | prod ??
export STAGE=debug

# EDIT-ME:
export GTEST_DIR=${HOME}/src/googletest/googletest

# iotivity networking
export IP_API=Default
#export BT_API=Bluedroid
#export BLE_API=Bluedroid
#export NFC_API=??

#######################
####  OUTPUT DIRS  ####

export PREFIX=/usr/local

# platform prefix e.g.  edison/x86/debug
PLATFORM_PREFIX=${TARGET_PLATFORM}/${TARGET_HWPLATFORM}/${STAGE}

# IOTIVITY_HOME is set by <platform>.devhost sourcefile
BUILD_HOME=${IOTIVITY_HOME}

# BUILD_SYSROOT is where transient built products go, including 3rd party libs like gtest
BUILD_SUBDIR=build
export BUILD_SYSROOT=${BUILD_HOME}/${BUILD_SUBDIR}/${PLATFORM_PREFIX}

# installable products go in ${INSTALL_SYSROOT}/${PREFIX}
INSTALL_SUBDIR=sysroots
export INSTALL_SYSROOT=${BUILD_HOME}/${INSTALL_SUBDIR}/${PLATFORM_PREFIX}


# 3rd-party, project-specific products (e.g. gtest) go in ${LIB_SYSROOT}/${PREFIX}
# NB: we do not build separately for each stage (dev, test, prod)
LIB_SUBDIR=lib
export LIB_SYSROOT=${BUILD_HOME}/${LIB_SUBDIR}/${TARGET_PLATFORM}/${TARGET_HWPLATFORM}

# not cross-compiling
# export INSTALL_SYSROOT=/

###########################
####  3RD PARTY BUILDS ####

# set prefix to ${IOTIVITY_HOME}/lib/${PLATFORM_PREFIX}

# e.g. for ctest: "cmake -DCMAKE_INSTALL_PREFIX=${IOTIVITY_HOME}/lib/${PLATFORM_PREFIX}

#######################
####     JAVA      ####
# TODO: java-dependent stuff goes in java sdk
export TARGET_JAVA_HOME=${XC_SDK_HOME}/sysroots/core2-32-poky-linux/usr/lib/jvm/java-8-openjdk
export TARGET_JDK_HOME=${TARGET_JAVA_HOME}

# the following is to get access to jni headers
export TARGET_JVM_HOST=linux

# export TARGET_JDK_INCLUDE_FLAGS="-I${JDK_HOME}/include -I${JDK_HOME}/include/${TARGET_KERNEL}"

# from darwin.targethost:
# export TARGET_JAVA_HOME=${JAVA_HOME}
# export TARGET_JDK_HOME=${JAVA_HOME}

export JDK_INCLUDE_FLAGS="-I${JDK_HOME}/include -I${JDK_HOME}/include/${TARGET_KERNEL}"


# export GRADLE_HOME=${HOME}/gradle/gradle-2.1.1
# export JNIPATH="${HOME}/iotivity/kit/java/jni"
# JLP = java.library.path
# export JLP=${JNI_PATH}:${LIBPATH}
#export LD_LIBRARY_PATH=${JLP}
#export JLP=${IOTIVITY_LIBPATH}

##################################
########  TOOLCHAIN VARS  ########
##################################
# most toolchain vars taken from /opt/poky-edison/1.7.3/environment-setup-core2-32-poky-linux

# this depends on host config:
export TOOLCHAIN_SYSROOT=${XC_SDK_HOME}/sysroots/${TOOLCHAIN_HOST}

export TARGET_SYSROOT=${XC_SDK_HOME}/sysroots/core2-32-poky-linux
export TOOLCHAIN_BIN_PREFIX=i586-poky-linux
DASH="-"

export ADDR2LINE=${TOOLCHAIN_BIN_PREFIX}${DASH}addr2line
export AR="${TOOLCHAIN_BIN_PREFIX}${DASH}ar"
export AS="${TOOLCHAIN_BIN_PREFIX}${DASH}as"
export CC=${TOOLCHAIN_BIN_PREFIX}${DASH}gcc
export CPP=${TOOLCHAIN_BIN_PREFIX}${DASH}gcc
export CXX=${TOOLCHAIN_BIN_PREFIX}${DASH}g++
export CXXFILT=${TOOLCHAIN_BIN_PREFIX}${DASH}c++filt
export ELFEDIT=${TOOLCHAIN_BIN_PREFIX}${DASH}elfedit
export GCOV=${TOOLCHAIN_BIN_PREFIX}${DASH}gcov
export GDB=${TOOLCHAIN_BIN_PREFIX}${DASH}gdb
export GPROF=${TOOLCHAIN_BIN_PREFIX}${DASH}gprof
export LD=${TOOLCHAIN_BIN_PREFIX}${DASH}ld
export LINK=${TOOLCHAIN_BIN_PREFIX}${DASH}g++   #???
export NM=${TOOLCHAIN_BIN_PREFIX}${DASH}nm
export OBJCOPY=${TOOLCHAIN_BIN_PREFIX}${DASH}objcopy
export OBJDUMP=${TOOLCHAIN_BIN_PREFIX}${DASH}objdump
export RANLIB=${TOOLCHAIN_BIN_PREFIX}${DASH}ranlib
export READELF=${TOOLCHAIN_BIN_PREFIX}${DASH}readelf
export SIZE=${TOOLCHAIN_BIN_PREFIX}${DASH}size
export STRINGS=${TOOLCHAIN_BIN_PREFIX}${DASH}strings
export STRIP=${TOOLCHAIN_BIN_PREFIX}${DASH}strip

export INSTALL="install -c"
export INSTALLDATA="install -c -m 644"

#unset SYSFLAG
SYSFLAG="--sysroot=${TARGET_SYSROOT}"

WARNFLAGS="-Wall -Wextra"

OPTIMIZEFLAGS=" -O2 -pipe -g -feliminate-unused-debug-types -fno-omit-frame-pointer"

#scons does not deal with this correctly: export CPPFLAGS="-E ${HWFLAGS}"

# GNU make implicit rules already include ${TARGET_ARCH}
export CPPFLAGS="-fPIC ${OPTIMIZEFLAGS} ${WARNFLAGS} ${SYSFLAG}"  #  -Wl,--hash-style=sysv"
export CFLAGS="-std=c11"
export CXXFLAGS="-std=c++11"
export LDFLAGS="-Wl,-O1 -Wl,--hash-style=sysv -Wl,--as-needed"

export LINKFLAGS="${SYSFLAG}"  # -shared"

# SHLINKFLAG and SHLIBSUFFIX are REQUIRED
# darwin uses "-dynamiclib" and ".dylib", so we need to be explicit:
export SHLINKFLAG="-shared"
export SHLIBSUFFIX=".so"

# C++ std lib
export CPPPATH="${TARGET_SYSROOT}/usr/include/c++/4.9.1 \
       ${TARGET_SYSROOT}/usr/include/c++/4.9.1/${TOOLCHAIN_BIN_PREFIX}"

# boost - preinstalled in std locn /usr/lib, usr/include/boost

export CPLUS_INCLUDE_PATH="-I${TARGET_SYSROOT}/usr/include/c++/4.9.1 \
       -I${TARGET_SYSROOT}/usr/include/c++/4.9.1/${TOOLCHAIN_BIN_PREFIX}"

# we already know what's available on the target so we hardcode:
export CPPDEFINES="HAVE_ARPA_INET_H \
       HAVE_ASSERT_H HAVE_FCNTL_H HAVE_LIMITS_H HAVE_NETDB_H \
       HAVE_NETINET_IN_H HAVE_PTHREAD_CONDATTR_SETCLOCK \
       HAVE_PTHREAD_H HAVE_STDLIB_H HAVE_STRING_H HAVE_STRINGS_H \
       HAVE_SYS_SOCKET_H HAVE_SYS_TIME_H HAVE_SYS_TYPES_H \
       HAVE_TIME_H HAVE_UNISTD_H WITH_POSIX"

#########################################
################  PATHS  ################

export TOOLCHAIN_PATH=${TOOLCHAIN_SYSROOT}/usr/bin:${TOOLCHAIN_SYSROOT}/usr/bin/${TOOLCHAIN_BIN_PREFIX}

export SYS_PATH=$PATH
export PATH=${TOOLCHAIN_PATH}:${PATH}

export LD_LIBRARY_PATH=${INSTALL_SYSROOT}/lib
